@page "/listdebts"
@using FinanceTrackerDotNET.Models
@using FinanceTrackerDotNET.Services

<h3 class="text-center mb-4 text-primary">Your Debts</h3>

<!-- Filter Section -->
<div class="filters-container mb-4 p-3 bg-light rounded shadow-sm">
    <div class="form-group">
        <label for="filterDate" class="form-label">Filter by Date:</label>
        <div class="d-flex gap-2">
            <input type="date" id="filterDate" @bind="filterDate" class="form-control" />
            <button class="btn btn-primary" @onclick="FilterByDate">
                <span class="material-icons">filter_alt</span> Filter
            </button>
        </div>
    </div>
</div>

<!-- Loading Spinner -->
@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (debts != null && debts.Count > 0)
{
    <!-- Debts Table -->
    <div class="table-responsive rounded shadow-sm">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col">Amount</th>
                    <th scope="col">Remarks</th>
                    <th scope="col">Created By</th>
                    <th scope="col">Debt Date</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in debts)
                {
                    <tr>
                        <td>@debt.Id</td>
                        <td class="fw-bold text-primary">@debt.Debt_Amount.ToString("C")</td>
                        <td title="@debt.Debt_Remarks">@debt.Debt_Remarks</td>
                        <td>@debt.Debt_CreatedBy</td>
                        <td>@debt.Debt_Date.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-success d-flex align-items-center gap-2" @onclick="() => PayOffDebt(debt.Id)">
                                <span class="material-icons">check_circle</span> Pay Off
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Total Debt Display -->
    <div class="alert alert-info text-center fw-bold fs-5 mt-4 rounded shadow-sm">
        Total Debt: <span class="text-danger">@totalDebt.ToString("C")</span>
    </div>
}
else if (debts != null)
{
    <!-- No Debts Found -->
    <div class="alert alert-warning text-center rounded shadow-sm">
        No debts found for your account.
    </div>
}

@code {
    [CascadingParameter]
    private GlobalState _loggedUser { get; set; }
    private List<DebtInfo> debts;
    private List<DebtInfo> allDebts; // Backup of all debts
    private bool isLoading = false;
    private int totalDebt;
    private DateTime? filterDate;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var userGuid = _loggedUser.CurrentUser.Id; // Use the ID from GlobalState directly
        debts = DebtService.GetByUserId(userGuid);
        allDebts = new List<DebtInfo>(debts); // Create a backup of all debts
        totalDebt = DebtService.GetTotalDebt(userGuid);
        isLoading = false;
    }

    private async Task PayOffDebt(Guid debtId)
    {
        DebtService.PayOff(debtId); // Call the service to mark debt as paid
        var userGuid = _loggedUser.CurrentUser.Id; // Re-fetch data for the logged-in user
        debts = DebtService.GetByUserId(userGuid);
        allDebts = new List<DebtInfo>(debts); // Update backup after paying off
        totalDebt = DebtService.GetTotalDebt(userGuid);
    }

    private void FilterByDate()
    {
        if (filterDate.HasValue)
        {
            // Filter debts by the selected date
            debts = allDebts.Where(d => d.Debt_Date.Date == filterDate.Value.Date).ToList();
        }
        else
        {
            // Reset to show all debts if no date is selected
            debts = new List<DebtInfo>(allDebts);
        }

        // Recalculate total debt for the filtered list
        totalDebt = debts.Sum(d => d.Debt_Amount);
    }
}

<style>
    :root {
        --primary-color: #007bff; /* Blue */
        --secondary-color: #0056b3; /* Darker Blue */
        --background-color: #ffffff;
        --border-radius: 12px;
        --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --gradient: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    }

    .filters-container {
        background: var(--background-color);
        padding: 1rem;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
    }

    .btn-primary {
        background: var(--gradient);
        border: none;
        font-size: 1rem;
        padding: 0.75rem 1.5rem;
        border-radius: var(--border-radius);
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

    .btn-success {
        background: #28a745; /* Green */
        border: none;
        font-size: 1rem;
        padding: 0.75rem 1.5rem;
        border-radius: var(--border-radius);
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-success:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

    .form-control {
        padding: 0.75rem;
        font-size: 1rem;
        border-radius: var(--border-radius);
        border: 1px solid #ddd;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

    .table {
        border-radius: var(--border-radius);
        overflow: hidden;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.1);
    }

    .alert {
        font-size: 1rem;
        padding: 0.75rem;
        text-align: center;
        border-radius: var(--border-radius);
    }

    .alert-info {
        background-color: #e3f2fd;
        color: #1976d2;
        border: 1px solid #90caf9;
    }

    .alert-warning {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeeba;
    }
</style>